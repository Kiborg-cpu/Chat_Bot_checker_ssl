import logging
from aiogram import Dispatcher, Bot, types
from aiogram.utils import executor
from aiogram.types import ParseMode, KeyboardButton, ReplyKeyboardMarkup
from link_filter import Link_filter
from qr_code import translate_qr_code
from site_checker import Check_site

API_TOKEN = '5618279321:AAHp0qAld0EjJCqmVkdqL2rCG9HibaAjKDY'

# Configure logging
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.filters_factory.bind(Link_filter)
url_check = Check_site()

button_question_ssl = KeyboardButton('–ß—Ç–æ —Ç–∞–∫–æ–µ ssl —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?')
greet_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
greet_kb.add(button_question_ssl)


@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!‚úã")
    await message.answer("–Ø checker_link_bot!")
    await message.answer("–Ø –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ssl —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∞–π—Ç–∞ –∏ –≥–ª—è–Ω—É—Ç—å –∫—É–¥–∞ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞—Ç—å —Ç–µ–±—è —Å–∞–π—Ç.üõ†üõ†üõ†")
    await message.answer("–ö–∏–Ω—å —Å—Å—ã–ª–∫—É –∏–ª–∏ QR_code –Ω–∞ —Å–∞–π—Ç, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤ —ç—Ç–æ–º —É–±–µ–¥–∏—Ç—å—Å—è.üßêüßêüßê", reply_markup=greet_kb)


@dp.message_handler(text='–ß—Ç–æ —Ç–∞–∫–æ–µ ssl —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?')
async def process_hi2_command(message: types.Message):
    await message.reply("SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ‚Äì —ç—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –≤–µ–±-—Å–∞–π—Ç–∞ –∏ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π "
                        "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ SSL –æ–∑–Ω–∞—á–∞–µ—Ç Secure Sockets Layer ‚Äì "
                        "–ø—Ä–æ—Ç–æ–∫–æ–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Å–æ–∑–¥–∞—é—â–∏–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º –∏ "
                        "–≤–µ–±-–±—Ä–∞—É–∑–µ—Ä–æ–º.")


@dp.message_handler(Link_filter())
async def message_info_link(message: types.Message):
    await message.reply('—Å–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–º...')
    await message.answer(check_site(message.text))  # , reply_markup=ikb)


@dp.message_handler(content_types=['photo'])
async def message_info_qr_code_link(message: types.Message):
    file_photo = message.photo[-1].file_id
    idfile = await bot.get_file(file_photo)
    dowloaded_file_photo = await bot.download_file(idfile.file_path)
    link = translate_qr_code(dowloaded_file_photo)

    await message.answer(link)
    await message.answer(check_site(link), parse_mode=ParseMode.HTML)


def check_site(link):
    text = '–≠—Ç–æ—Ç —Å–∞–π—Ç:\n'
    if url_check.is_valid(link):
        if url_check.get_ssl_cert(link):
            text += '‚úÖ–ò–ú–ï–ï–¢ SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢' + '\n'
        else:
            text += '‚ùå–û–¢–°–£–¢–°–¢–í–£–ï–¢ SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢\n'
        if url_check.check_redirect(link):
            text += '‚úÖ–ù–µ—Ç –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É'
        else:
            if len(url_check.r.history) > 1:
                text += '‚ùå–ï—Å—Ç—å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n'
                for i, response in enumerate(url_check.r.history, 1):
                    text += f'{i}. {response.url}\n'
            else:
                text += '‚ùå–ï—Å—Ç—å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:\n'
                text += url_check.r.history
        return text
    else:
        return '–û—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Å—ã–ª–∫—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å'


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
